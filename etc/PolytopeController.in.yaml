---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: true
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
# If true, state factory will be more verbose
VerboseStateFactory: false
# Additional robots to load
robots:
  ground:
    module: env/ground
  wall:
    module: env/door
    init_pos:
      translation: [0.60, -0.6, 0.0]
      rotation: [0.0, 0.0, 0.0]
# General constraints, always on
constraints:
- type: contact
- type: dynamics
  damper: [0.1, 0.01, 0.5]
- type: compoundJoint
# Collision constraint
collisions:
- type: collision
  useMinimal: true
# Initial set of contacts
contacts:
- r2: ground
  r1Surface: LeftFootCenter
  r2Surface: AllGround
  dof: [0.0, 0.0, 1.0, 1.0, 1.0, 0.0]
- r2: ground
  r1Surface: RightFootCenter
  r2Surface: AllGround
  dof: [0.0, 0.0, 1.0, 1.0, 1.0, 0.0]

DCM_VRPTask:
  type: DCM-VRP
  possibleContacts: [RightFootCenter, LeftFootCenter, RightHand]
  robotMass:
    rhps1: 61.264
    hrp4: 35.178
    rhps1_plate_plate: 59.358

# Some options for a specific robot
jvrc1:
  posture:
    stiffness: 1
    weight: 10
  ff:
    stiffness: 2
    weight: 100
# Implement some additional text states
states:

  ContactWall:
    base: MetaTasks
    tasks:
      RightHandTraj:
        type: transform
        frame: RightHand
        weight: 1000
        stiffness: 5
        targetSurface:
          robot: wall
          surface: Door
          offset_translation: [-0.05, -0.2, 0.0]
          offset_rotation: [0.0, -1.57, 0.0]
        completion:
          eval: 0.01
      # CoM:
      #   type: com
      #   above: [LeftFoot, RightFoot]
      #   weight: 2000
      #   stiffness: 5
    AddContactsAfter:
      - r2: wall
        r1Surface: RightHand
        r2Surface: Door
        dof: [0.0, 0.0, 1.0, 1.0, 1.0, 0.0]



# Transitions map
transitions:
- [PolytopeController_Initial, OK, ContactWall, Strict]
- [ContactWall, OK, Pause, Strict]
# Initial state
init: PolytopeController_Initial

ObserverPipelines:
- name: MainRobPipeline                    # - Create a new pipeline
  gui: true                              #   diplay the pipeline in the GUI (default = false)
  log: true                              #   log observers (default)
  observers:                             #   declare which observers to use
  - type: Encoder                        # - Use an EncoderObserver
    config:
      position: encoderValues            #    - Sets joint position from encoder sensor values (default)
      velocity: encoderFiniteDifferences #    - Computes joint velocities by finite differences  (default)
      computeFV: true                    # We now have the estimation of each joint position and velocity and the corresponding body positions and velocities, but we are still missing the floating base
  - type: Attitude
    config:
      bodySensor: Accelerometer
  - type: KinematicInertial              # - Estimates the floating base state using the KinematicInertial observer
    update: true                         #   update the real robot instance from its results
    gui: true                            #   Displays the estimated velocity as an arrow (default)
    config:
      bodySensor: Accelerometer          # This observer only uses roll and pitch rotation information from this sensor along with a kinematic anchor point and the robot kinematics between the anchor frame and the floating base frame.

DynamicPolytope:
  mainRobot:
    polyhedronForce: &polyhedron
      triangle_color: [1.0, 0.0, 0.0, 0.4]
      show_triangle: true
      use_triangle_color: false
      edges:
        color: [0.75, 0.75, 0.75, 1.0]
        width: 0.003
        style: solid
      show_edges: false
      fixed_edge_color: true
      vertices:
        color: [1.0, 0.0, 0.0, 1.0]
        scale: 0.02
      show_vertices: false
      fixed_vertices_color: true
    polyhedronMoment:
      <<: *polyhedron
      triangle_color: [0.0, 0.0, 1.0, 0.4]
    polyhedronZMP:
      <<: *polyhedron
      triangle_color: [0.0, 1.0, 0.0, 0.4]
    polyhedronZeroMomentArea:
      <<: *polyhedron
      triangle_color: [0.7, 0.3, 0.0, 0.4]
    withMoments: false
  human:
    polyhedronForce:
      <<: *polyhedron
      triangle_color: [0.0, 1.0, 0.0, 0.4]
    polyhedronMoment:
      <<: *polyhedron
      triangle_color: [1.0, 0.0, 0.0, 0.4]
  e2dr:
    polyhedronForce:
      <<: *polyhedron
    polyhedronMoment:
      <<: *polyhedron
      triangle_color: [0.0, 0.0, 1.0, 0.3]
  rhps1:
    polyhedronForce:
      <<: *polyhedron
    polyhedronMoment:
      <<: *polyhedron
      triangle_color: [0.0, 0.0, 1.0, 0.4]
