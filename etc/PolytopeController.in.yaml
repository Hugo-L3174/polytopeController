---
# If true, the FSM transitions are managed by an external tool
Managed: false
# If true and the FSM is self-managed, transitions should be triggered
StepByStep: true
# Change idle behaviour, if true the state is kept until transition,
# otherwise the FSM holds the last state until transition
IdleKeepState: false
# Where to look for state libraries
StatesLibraries:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@"
# Where to look for state files
StatesFiles:
- "@MC_STATES_DEFAULT_RUNTIME_INSTALL_PREFIX@/data"
- "@MC_STATES_RUNTIME_INSTALL_PREFIX@/data"
# If true, state factory will be more verbose
VerboseStateFactory: false
# Additional robots to load
robots:
  ground:
    module: env/ground
# General constraints, always on
constraints:
- type: contact
- type: dynamics
  damper: [0.1, 0.01, 0.5]
- type: compoundJoint
# Collision constraint
collisions:
- type: collision
  useMinimal: true
# Initial set of contacts
contacts:
- r2: ground
  r1Surface: LeftFoot
  r2Surface: AllGround
- r2: ground
  r1Surface: RightFoot
  r2Surface: AllGround

# Some options for a specific robot
jvrc1:
  posture:
    stiffness: 1
    weight: 10
  ff:
    stiffness: 2
    weight: 100
# Implement some additional text states
states: {}
# Transitions map
transitions:
- [PolytopeController_Initial, OK, PolytopeController_Initial, Strict]
# Initial state
init: PolytopeController_Initial


StabilityPolytope:
  hrp4:
    polyhedronOK: &polyhedron
      triangle_color: [1.0, 0.0, 0.0, 0.3]
      show_triangle: true
      use_triangle_color: false
      edges:
        color: [0.75, 0.75, 0.75, 1.0]
        width: 0.003
        style: solid
      show_edges: false
      fixed_edge_color: true
      vertices:
        color: [1.0, 0.0, 0.0, 1.0]
        scale: 0.02
      show_vertices: false
      fixed_vertices_color: true
    polyhedronNOK:
      <<: *polyhedron
      triangle_color: [0.0, 0.0, 1.0, 0.3]
  human:
    polyhedronOK:
      <<: *polyhedron
      triangle_color: [0.0, 1.0, 0.0, 0.4]
    polyhedronNOK:
      <<: *polyhedron
      triangle_color: [1.0, 0.0, 0.0, 0.4]
  e2dr:
    polyhedronOK:
      <<: *polyhedron
    polyhedronNOK:
      <<: *polyhedron
      triangle_color: [0.0, 0.0, 1.0, 0.3]